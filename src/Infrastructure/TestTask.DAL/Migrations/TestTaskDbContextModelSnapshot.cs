// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.DAL;

#nullable disable

namespace TestTask.DAL.Migrations
{
    [DbContext(typeof(TestTaskDbContext))]
    partial class TestTaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestTask.Domain.Entities.Commission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyFromId");

                    b.HasIndex("CurrencyToId");

                    b.ToTable("Commissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("077045d1-8307-4248-9a80-0ebba6702608"),
                            CurrencyFromId = new Guid("51bda368-44d3-4c3c-a12b-4d110af2aa58"),
                            CurrencyToId = new Guid("9cb41dc5-6c19-4f20-a1be-785c74608426"),
                            Value = 0.1m
                        },
                        new
                        {
                            Id = new Guid("06c4758a-19ff-41ab-983f-75a8e08ec78a"),
                            CurrencyFromId = new Guid("9cb41dc5-6c19-4f20-a1be-785c74608426"),
                            CurrencyToId = new Guid("51bda368-44d3-4c3c-a12b-4d110af2aa58"),
                            Value = 0.21m
                        },
                        new
                        {
                            Id = new Guid("3d6aafdd-8dc5-4aa0-ad0d-b7bfeff520d4"),
                            CurrencyFromId = new Guid("39539dfa-9514-43f9-b200-9168f5ed57e3"),
                            CurrencyToId = new Guid("51bda368-44d3-4c3c-a12b-4d110af2aa58"),
                            Value = 0.14m
                        },
                        new
                        {
                            Id = new Guid("d7f63369-4d78-4705-8de2-2fa37e2fade7"),
                            CurrencyFromId = new Guid("51bda368-44d3-4c3c-a12b-4d110af2aa58"),
                            CurrencyToId = new Guid("39539dfa-9514-43f9-b200-9168f5ed57e3"),
                            Value = 0.08m
                        },
                        new
                        {
                            Id = new Guid("29de9a6f-83a3-41cc-9a47-f753bbe78988"),
                            CurrencyFromId = new Guid("9cb41dc5-6c19-4f20-a1be-785c74608426"),
                            CurrencyToId = new Guid("fa5f6314-81c2-4423-85dc-705a6241cabc"),
                            Value = 0.15m
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlphabeticCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("NumericCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.HasIndex("AlphabeticCode")
                        .IsUnique();

                    b.HasIndex("NumericCode")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39539dfa-9514-43f9-b200-9168f5ed57e3"),
                            AlphabeticCode = "USD",
                            NumericCode = "840",
                            Title = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("fa5f6314-81c2-4423-85dc-705a6241cabc"),
                            AlphabeticCode = "EUR",
                            NumericCode = "978",
                            Title = "Euro"
                        },
                        new
                        {
                            Id = new Guid("51bda368-44d3-4c3c-a12b-4d110af2aa58"),
                            AlphabeticCode = "UAH",
                            NumericCode = "980",
                            Title = "Ukrainian Hryvnia"
                        },
                        new
                        {
                            Id = new Guid("8810620d-7a4d-443f-8d6c-33711fff897a"),
                            AlphabeticCode = "GBP",
                            NumericCode = "826",
                            Title = "British Pound Sterling"
                        },
                        new
                        {
                            Id = new Guid("df68b4b6-3262-46b0-ad0c-f82518080f07"),
                            AlphabeticCode = "JPY",
                            NumericCode = "392",
                            Title = "Japanese Yen"
                        },
                        new
                        {
                            Id = new Guid("9cb41dc5-6c19-4f20-a1be-785c74608426"),
                            AlphabeticCode = "RUB",
                            NumericCode = "643",
                            Title = "Russian Ruble"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("MoneyAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1e2e6af-c58e-496b-9f34-80a752877018"),
                            Balance = 0m,
                            CurrencyId = new Guid("39539dfa-9514-43f9-b200-9168f5ed57e3"),
                            UserId = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3")
                        },
                        new
                        {
                            Id = new Guid("be264be9-9f5e-4bd4-9798-bfbae25ec1f5"),
                            Balance = 0m,
                            CurrencyId = new Guid("39539dfa-9514-43f9-b200-9168f5ed57e3"),
                            UserId = new Guid("61a8814d-e898-4346-866e-b9abe231d74a")
                        },
                        new
                        {
                            Id = new Guid("fe70e26f-fe0c-495d-972e-392709789ea4"),
                            Balance = 0m,
                            CurrencyId = new Guid("fa5f6314-81c2-4423-85dc-705a6241cabc"),
                            UserId = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3")
                        },
                        new
                        {
                            Id = new Guid("cf707dcf-06ed-457d-b74f-b7fddc8eff2f"),
                            Balance = 0m,
                            CurrencyId = new Guid("fa5f6314-81c2-4423-85dc-705a6241cabc"),
                            UserId = new Guid("61a8814d-e898-4346-866e-b9abe231d74a")
                        },
                        new
                        {
                            Id = new Guid("080eb4d9-32a0-46f6-896a-2f3533fcec58"),
                            Balance = 0m,
                            CurrencyId = new Guid("51bda368-44d3-4c3c-a12b-4d110af2aa58"),
                            UserId = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3")
                        },
                        new
                        {
                            Id = new Guid("78a2d9a7-da65-4140-a123-d24881bdd762"),
                            Balance = 0m,
                            CurrencyId = new Guid("51bda368-44d3-4c3c-a12b-4d110af2aa58"),
                            UserId = new Guid("61a8814d-e898-4346-866e-b9abe231d74a")
                        },
                        new
                        {
                            Id = new Guid("8c837b24-f23e-42e9-b56e-7fbcce2e9b16"),
                            Balance = 0m,
                            CurrencyId = new Guid("8810620d-7a4d-443f-8d6c-33711fff897a"),
                            UserId = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3")
                        },
                        new
                        {
                            Id = new Guid("eec5e097-115c-42c2-8217-2a1ea59b648f"),
                            Balance = 0m,
                            CurrencyId = new Guid("8810620d-7a4d-443f-8d6c-33711fff897a"),
                            UserId = new Guid("61a8814d-e898-4346-866e-b9abe231d74a")
                        },
                        new
                        {
                            Id = new Guid("4a6ce671-2c14-4b01-952c-10ec370a7175"),
                            Balance = 0m,
                            CurrencyId = new Guid("df68b4b6-3262-46b0-ad0c-f82518080f07"),
                            UserId = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3")
                        },
                        new
                        {
                            Id = new Guid("e1a0a2f6-34cf-4b22-94ec-9ae80a9c6ff9"),
                            Balance = 0m,
                            CurrencyId = new Guid("df68b4b6-3262-46b0-ad0c-f82518080f07"),
                            UserId = new Guid("61a8814d-e898-4346-866e-b9abe231d74a")
                        },
                        new
                        {
                            Id = new Guid("5e458d2d-a77f-4d6e-bc27-40ce6b65f264"),
                            Balance = 0m,
                            CurrencyId = new Guid("9cb41dc5-6c19-4f20-a1be-785c74608426"),
                            UserId = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3")
                        },
                        new
                        {
                            Id = new Guid("865897d9-ba0a-4cf0-9df6-77ed4671c06d"),
                            Balance = 0m,
                            CurrencyId = new Guid("9cb41dc5-6c19-4f20-a1be-785c74608426"),
                            UserId = new Guid("61a8814d-e898-4346-866e-b9abe231d74a")
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AppliedCommissionValue")
                        .HasPrecision(4, 4)
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal>("AppliedExchangeRate")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid?>("MoneyAccountFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MoneyAccountToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MoneyAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("MoveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OperationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MoneyAccountFromId");

                    b.HasIndex("MoneyAccountToId");

                    b.ToTable("MoneyOperations");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a4abf0b-5e14-4a5a-9614-694adf676cbf"),
                            Title = "User"
                        },
                        new
                        {
                            Id = new Guid("9c6aa58f-bad4-4238-9f4e-bdf04d0cdbf8"),
                            Title = "Admin"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3"),
                            Email = "penis@gmail.com",
                            FullName = "Mike Vazovskiy",
                            PasswordHash = "$2a$11$p9jpLyVIrFG1boinEavjCOjn87R/li8jkoCgWc5rSrTXkTenPyZU."
                        },
                        new
                        {
                            Id = new Guid("61a8814d-e898-4346-866e-b9abe231d74a"),
                            Email = "popka@gmail.com",
                            FullName = "John Doe",
                            PasswordHash = "$2a$11$3n/IoRP2UZYbW14mChjkGO8FT2jrkIDIXJAFWqxNE0PomFUU.BRrS"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3"),
                            RoleId = new Guid("0a4abf0b-5e14-4a5a-9614-694adf676cbf")
                        },
                        new
                        {
                            UserId = new Guid("93e8a673-5c07-4d41-8eb3-dbc9713588d3"),
                            RoleId = new Guid("9c6aa58f-bad4-4238-9f4e-bdf04d0cdbf8")
                        },
                        new
                        {
                            UserId = new Guid("61a8814d-e898-4346-866e-b9abe231d74a"),
                            RoleId = new Guid("0a4abf0b-5e14-4a5a-9614-694adf676cbf")
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Commission", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Currency", "From")
                        .WithMany()
                        .HasForeignKey("CurrencyFromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestTask.Domain.Entities.Currency", "To")
                        .WithMany()
                        .HasForeignKey("CurrencyToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyAccount", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Domain.Entities.User", "User")
                        .WithMany("MoneyAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyOperation", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.MoneyAccount", "From")
                        .WithMany()
                        .HasForeignKey("MoneyAccountFromId");

                    b.HasOne("TestTask.Domain.Entities.MoneyAccount", "To")
                        .WithMany()
                        .HasForeignKey("MoneyAccountToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.User", b =>
                {
                    b.Navigation("MoneyAccounts");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
